//---------------------------------------------------
// Ressource File for CATPrtModelHeader Class
// En_US
//---------------------------------------------------

// == Pad == 

CATPrtModelHeader.PadHeader.Title="Pad...";
CATPrtModelHeader.PadHeader.Help="Creates a pad by extruding an open or closed profile.";
CATPrtModelHeader.PadHeader.LongHelp="Pad\nCreates a pad from an open \nor closed profile.";
CATPrtModelHeader.PadHeader.ShortHelp="Pad";


// == Pocket == 

CATPrtModelHeader.PocketHeader.Title="Pocket...";
CATPrtModelHeader.PocketHeader.Help="Creates a pocket by removing material.";
CATPrtModelHeader.PocketHeader.LongHelp="Pocket\nCreates a pocket from a profile.";
CATPrtModelHeader.PocketHeader.ShortHelp="Pocket";


// == Hole == 

CATPrtModelHeader.HoleHeader.Title="Hole...";
CATPrtModelHeader.HoleHeader.Help="Creates various types of holes: simple, tapered, counterbored, countersunk and counterdrilled holes.";
CATPrtModelHeader.HoleHeader.LongHelp="Hole\nCreates various types of holes: simple, \ntapered, counterbored, countersunk and \ncounterdrilled holes.";
CATPrtModelHeader.HoleHeader.ShortHelp="Hole";


// == Shaft == 

CATPrtModelHeader.ShaftHeader.Title="Shaft...";
CATPrtModelHeader.ShaftHeader.Help="Creates a shaft by revolving a sketch around an axis.";
CATPrtModelHeader.ShaftHeader.LongHelp="Shaft\nCreates a shaft by revolving \na sketch around an axis.";
CATPrtModelHeader.ShaftHeader.ShortHelp="Shaft";


// == Groove == 

CATPrtModelHeader.GrooveHeader.Title="Groove...";
CATPrtModelHeader.GrooveHeader.Help="Creates a groove by revolving a sketch around an axis.";
CATPrtModelHeader.GrooveHeader.LongHelp="Groove\nCreates a groove by revolving \na sketch around an axis.";
CATPrtModelHeader.GrooveHeader.ShortHelp="Groove";


// == Stiffener == 

CATPrtModelHeader.CreateStiffener.Title="Stiffener...";
CATPrtModelHeader.CreateStiffener.Help="Creates a stiffener.";
CATPrtModelHeader.CreateStiffener.LongHelp="Stiffener\nCreates a stiffener";
CATPrtModelHeader.CreateStiffener.ShortHelp="Stiffener";


// == Slot == 

CATPrtModelHeader.SlotHeader.Title="Slot...";
CATPrtModelHeader.SlotHeader.Help="Creates a slot by sweeping a profile along a center curve.";
CATPrtModelHeader.SlotHeader.LongHelp="Slot\nCreates a slot by sweeping a profile \nalong a center curve.";
CATPrtModelHeader.SlotHeader.ShortHelp="Slot";


// == Rib == 

CATPrtModelHeader.CreateRib.Title="Rib...";
CATPrtModelHeader.CreateRib.Help="Creates a rib by sweeping a profile along a center curve.";
CATPrtModelHeader.CreateRib.LongHelp="Rib\nCreates a rib by sweeping a profile \nalong a center curve.";
CATPrtModelHeader.CreateRib.ShortHelp="Rib";


// == Fillet == 

CATPrtModelHeader.FilletHeader.Title="Edge Fillet...";
CATPrtModelHeader.FilletHeader.Help="Creates a fillet using an edge.";
CATPrtModelHeader.FilletHeader.LongHelp="Edge Fillet\nCreates an edge fillet.";
CATPrtModelHeader.FilletHeader.ShortHelp="Edge Fillet";


// == Fillet Variable == 

CATPrtModelHeader.FilletVariable.Title="Variable Fillet...";
CATPrtModelHeader.FilletVariable.Help="Creates a variable radius fillet.";
CATPrtModelHeader.FilletVariable.LongHelp="Variable Radius Fillet\nDefines a fillet which radius varies \nat each selected point.";
CATPrtModelHeader.FilletVariable.ShortHelp="Variable Radius Fillet";


// == Fillet Face == 

CATPrtModelHeader.FilletFace.Title="Face-Face Fillet...";
CATPrtModelHeader.FilletFace.Help="Creates a face-face fillet by selecting two faces.";
CATPrtModelHeader.FilletFace.LongHelp="Face-Face Fillet\nCreates a face-face fillet.";
CATPrtModelHeader.FilletFace.ShortHelp="Face-Face Fillet";


// == Fillet Tritangent == 

CATPrtModelHeader.FilletTritangent.Title="Tritangent Fillet...";
CATPrtModelHeader.FilletTritangent.Help="Creates a fillet by removing the face you specify.";
CATPrtModelHeader.FilletTritangent.LongHelp="Tritangent Fillet\nCreates a tritangent fillet from \nthree faces you specify.";
CATPrtModelHeader.FilletTritangent.ShortHelp="Tritangent Fillet";

// == Chordal Fillet == 

CATPrtModelHeader.ChordalFillet.Title="Chordal Fillet...";
CATPrtModelHeader.ChordalFillet.Help="Creates a fillet by specifying the width of the fillet ribbon.";
CATPrtModelHeader.ChordalFillet.LongHelp="Chordal Fillet\nCreates a chordal fillet by \ndefining the width of the fillet at each selected point.";
CATPrtModelHeader.ChordalFillet.ShortHelp="Chordal Fillet";

// == Chamfer == 

CATPrtModelHeader.ChamferHeader.Title="Chamfer...";
CATPrtModelHeader.ChamferHeader.Help="Chamfers the part by removing or adding material from a selected edge.";
CATPrtModelHeader.ChamferHeader.LongHelp="Chamfer\nCreates a chamfer by removing or adding \nmaterial from a selected edge";
CATPrtModelHeader.ChamferHeader.ShortHelp="Chamfer";


// == Draft == 

CATPrtModelHeader.DraftHeader.Title="Draft...";
CATPrtModelHeader.DraftHeader.Help="Creates a draft.";
CATPrtModelHeader.DraftHeader.LongHelp="Draft Angle\nCreates a draft.";
CATPrtModelHeader.DraftHeader.ShortHelp="Draft Angle";


// == Draft Reflect == 

CATPrtModelHeader.DraftReflect.Title="Draft reflect line...";
CATPrtModelHeader.DraftReflect.Help="Creates a draft from reflect lines.";
CATPrtModelHeader.DraftReflect.LongHelp="Draft Reflect Line\nCreates a draft from reflect lines.";
CATPrtModelHeader.DraftReflect.ShortHelp="Draft Reflect Line";


// == Draft Variable == 

CATPrtModelHeader.DraftVariable.Title="Variable Angle Draft...";
CATPrtModelHeader.DraftVariable.Help="Creates a variable angle draft.";
CATPrtModelHeader.DraftVariable.LongHelp="Variable Angle Draft\nCreates a variable angle draft.";
CATPrtModelHeader.DraftVariable.ShortHelp="Variable Angle Draft";


// == Advanced Draft BothSides == 

CATPrtModelHeader.DraftBothSides.Title="Advanced Draft...";
CATPrtModelHeader.DraftBothSides.Help="Creates an advanced draft both sides.";
CATPrtModelHeader.DraftBothSides.LongHelp="Advanced Draft\nCreates an advanced draft both sides.";
CATPrtModelHeader.DraftBothSides.ShortHelp="Advanced Draft";

// == Draft Both Sides (new) == 
CATPrtModelHeader.DraftBothSidesNew.Title="Draft Both Sides...";
CATPrtModelHeader.DraftBothSidesNew.Help="Creates a draft both sides.";
CATPrtModelHeader.DraftBothSidesNew.LongHelp="Draft Both Sides\nCreates a draft both sides.";
CATPrtModelHeader.DraftBothSidesNew.ShortHelp="Draft Both Sides";

// == Draft Analysis == 

CATPrtModelHeader.DraftAnalysisHeader.Title = "Draft Analysis";
CATPrtModelHeader.DraftAnalysisHeader.Help = "Analyzes the draft angle of the selected body or surface";
CATPrtModelHeader.DraftAnalysisHeader.LongHelp = 
"Draft Analysis
Maps colors on bodies or surfaces according to
the delta angle value between the normal vector
and the draft direction on each surface point.";
CATPrtModelHeader.DraftAnalysisHeader.ShortHelp = "Draft Analysis";


// == Gaussian Curvature == 

CATPrtModelHeader.GaussCurvatureHeader.Title = "Curvature Analysis";
CATPrtModelHeader.GaussCurvatureHeader.Help = "Analyzes the Gaussian curvature of the selected body or surface";
CATPrtModelHeader.GaussCurvatureHeader.LongHelp = 
"Gaussian Curvature
Maps a color on bodies or surfaces
according to the curvature in each point.";

CATPrtModelHeader.GaussCurvatureHeader.ShortHelp = "Curvature Analysis";


// == Thread/Tap analysis == 

CATPrtModelHeader.ThreadAnalysisHeader.Title = "Tap - Thread Analysis";
CATPrtModelHeader.ThreadAnalysisHeader.Help = "Analysis of all thread - tap of current part.";
CATPrtModelHeader.ThreadAnalysisHeader.LongHelp ="Analysis of all thread - tap of current part \nProvides capability to display symbolic geometry \nand numerical characteristics.";
CATPrtModelHeader.ThreadAnalysisHeader.ShortHelp = "Tap - Thread Analysis";


// == Shell == 

CATPrtModelHeader.ShellHeader.Title="Shell...";
CATPrtModelHeader.ShellHeader.Help="Creates a shell by specifying one or more thicknesses.";
CATPrtModelHeader.ShellHeader.LongHelp="Shell\nCreates a shell by specifying one \or more thicknesses.";
CATPrtModelHeader.ShellHeader.ShortHelp="Shell";


// == Thickness == 

CATPrtModelHeader.ThicknessHeader.Title="Thickness...";
CATPrtModelHeader.ThicknessHeader.Help="Adds or removes thickness.";
CATPrtModelHeader.ThicknessHeader.LongHelp="Thickness\nAdds or removes thickness on one \or more faces.";
CATPrtModelHeader.ThicknessHeader.ShortHelp="Thickness";


// == RemoveFace == 

CATPrtModelHeader.RemoveFaceHeader.Title="Remove Face...";
CATPrtModelHeader.RemoveFaceHeader.Help="Removes Faces.";
CATPrtModelHeader.RemoveFaceHeader.LongHelp="Remove Face\nRemoves one \or more faces.";
CATPrtModelHeader.RemoveFaceHeader.ShortHelp="Remove Face";


// == Pattern Rectangular == 

CATPrtModelHeader.RectangularPatternHeader.Title="Rectangular Pattern...";
CATPrtModelHeader.RectangularPatternHeader.Help="Creates a rectangular pattern to repeat a feature.";
CATPrtModelHeader.RectangularPatternHeader.LongHelp="Rectangular Pattern\nCreates a rectangular pattern \nto repeat a feature.";
CATPrtModelHeader.RectangularPatternHeader.ShortHelp="Rectangular Pattern";


// == Pattern Circular == 

CATPrtModelHeader.CircularPatternHeader.Title="Circular Pattern...";
CATPrtModelHeader.CircularPatternHeader.Help="Creates a circular pattern to repeat a feature.";
CATPrtModelHeader.CircularPatternHeader.LongHelp="Circular Pattern\nCreates a circular pattern \nto repeat a feature.";
CATPrtModelHeader.CircularPatternHeader.ShortHelp="Circular Pattern";


// == Pattern User == 

CATPrtModelHeader.UserPatternHeader.Title="User Pattern...";
CATPrtModelHeader.UserPatternHeader.Help="Creates a User pattern to repeat a feature.";
CATPrtModelHeader.UserPatternHeader.LongHelp="User Pattern\nCreates a User pattern \nto repeat a feature.";
CATPrtModelHeader.UserPatternHeader.ShortHelp="User Pattern";


// == Mirror == 

CATPrtModelHeader.MirrorHeader.Title="Mirror...";
CATPrtModelHeader.MirrorHeader.Help="Mirrors a body about the selected face or plane.";
CATPrtModelHeader.MirrorHeader.LongHelp="Mirror\nMirrors a body about the selected \nface or plane.";
CATPrtModelHeader.MirrorHeader.ShortHelp="Mirror";


// == Split == 

CATPrtModelHeader.SplitHeader.Title="Split...";
CATPrtModelHeader.SplitHeader.Help="Splits a body using a plane, face or surface.";
CATPrtModelHeader.SplitHeader.LongHelp="Split\nSplits a body using a plane \n,face or surface.";
CATPrtModelHeader.SplitHeader.ShortHelp="Split";


// == Sewing == 

CATPrtModelHeader.SewSurfaceHeader.Title="Sew Surface...";
CATPrtModelHeader.SewSurfaceHeader.Help="Sewing a face or a surface onto a body .";
CATPrtModelHeader.SewSurfaceHeader.LongHelp="Sewing\nSews a face or a surface \n onto a body.";
CATPrtModelHeader.SewSurfaceHeader.ShortHelp="Sew Surface";


// == Replace Face / Align == 

CATPrtModelHeader.AlignHeader.Title="Replace Face...";
CATPrtModelHeader.AlignHeader.Help="Replace a face by a surface.";
CATPrtModelHeader.AlignHeader.LongHelp="Replace a face\nReplaces a face by a surface.";
CATPrtModelHeader.AlignHeader.ShortHelp="Replace Face";

// == CloseSurface == 

CATPrtModelHeader.CloseSurfaceHeader.Title="Close Surface...";
CATPrtModelHeader.CloseSurfaceHeader.Help="Close a surface .";
CATPrtModelHeader.CloseSurfaceHeader.LongHelp="Closes a surface.";
CATPrtModelHeader.CloseSurfaceHeader.ShortHelp="Close Surface";


// == Scaling == 

CATPrtModelHeader.ScalingHeader.Title="Scaling...";
CATPrtModelHeader.ScalingHeader.Help="Scales a body using a point or a face or a plane .";
CATPrtModelHeader.ScalingHeader.LongHelp="Scaling\nScales the body to the dimension you specify.";
CATPrtModelHeader.ScalingHeader.ShortHelp="Scaling";


// == ThickSurface == 

CATPrtModelHeader.ThickSurfaceHeader.Title="Thick Surface...";
CATPrtModelHeader.ThickSurfaceHeader.Help="Creates a thick surface by specifying two thicknesses.";
CATPrtModelHeader.ThickSurfaceHeader.LongHelp="ThickSurface\nCreates a thick surface by specifying two thicknesses.";
CATPrtModelHeader.ThickSurfaceHeader.ShortHelp="Thick Surface";


// == Thread == 

CATPrtModelHeader.ThreadHeader.Title="Thread/Tap...";
CATPrtModelHeader.ThreadHeader.Help="Creates a thread or a tap.";
CATPrtModelHeader.ThreadHeader.LongHelp="Thread/Tap \nCreates a thread or a tap by specifying its support,limite and numerical values.";
CATPrtModelHeader.ThreadHeader.ShortHelp="Thread/Tap";


// == Translation == 

CATPrtModelHeader.TranslationHeader.Title="Translation...";
CATPrtModelHeader.TranslationHeader.Help="Translates a body.";
CATPrtModelHeader.TranslationHeader.LongHelp="Translates the body to the direction you specify.";
CATPrtModelHeader.TranslationHeader.ShortHelp="Translation";


// == Rotation == 

CATPrtModelHeader.RotationHeader.Title="Rotation...";
CATPrtModelHeader.RotationHeader.Help="Rotates a body.";
CATPrtModelHeader.RotationHeader.LongHelp="Rotates the body around the axis you specify.";
CATPrtModelHeader.RotationHeader.ShortHelp="Rotation";


// == Symmetry == 

CATPrtModelHeader.SymmetryHeader.Title="Symmetry...";
CATPrtModelHeader.SymmetryHeader.Help="Symmetry without duplication a body about the selected face or plane.";
CATPrtModelHeader.SymmetryHeader.LongHelp="Symmetry\nMirrors a body without duplication about the selected \nface or plane.";
CATPrtModelHeader.SymmetryHeader.ShortHelp="Symmetry";

// == AxisToAxis == 

CATPrtModelHeader.AxisToAxisHeader.Title="Axis To Axis...";
CATPrtModelHeader.AxisToAxisHeader.Help="AxisToAxis translates the body using the reference axis to target axis.";
CATPrtModelHeader.AxisToAxisHeader.LongHelp="AxisToAxis translates the body using the reference axis to target axis.";
CATPrtModelHeader.AxisToAxisHeader.ShortHelp="AxisToAxis";

// == Affinity == 

CATPrtModelHeader.AffinityHeader.Title="Affinity...";
CATPrtModelHeader.AffinityHeader.Help="Affinity changes and translates according to the ratio values of the co-ordinates.";
CATPrtModelHeader.AffinityHeader.LongHelp="Affinity changes and translates according to the ratio values of the co-ordinates.";
CATPrtModelHeader.AffinityHeader.ShortHelp="Affinity";

// == MeasureBetween == 

CATPrtModelHeader.MeasureBetweenHeader.Title="Measure Between...";
CATPrtModelHeader.MeasureBetweenHeader.Help="Measures between two items.";
CATPrtModelHeader.MeasureBetweenHeader.LongHelp="Measures between two items.";
CATPrtModelHeader.MeasureBetweenHeader.ShortHelp="Measure Between";


// == MeasureItem == 

CATPrtModelHeader.MeasureItemHeader.Title="MeasureItem...";
CATPrtModelHeader.MeasureItemHeader.Help="Measures an Item.";
CATPrtModelHeader.MeasureItemHeader.LongHelp="Measures an Item.";
CATPrtModelHeader.MeasureItemHeader.ShortHelp="MeasureItem";


CATPrtModelHeader.BoolAssemble.Title="Assemble...";
CATPrtModelHeader.BoolAssemble.Help="Assembles the selected body to another body";
CATPrtModelHeader.BoolAssemble.ShortHelp="Assemble";
CATPrtModelHeader.BoolAssemble.LongHelp="Assemble/Assembles the body to another body";


CATPrtModelHeader.BoolAdd.Title="Add...";
CATPrtModelHeader.BoolAdd.Help="Adds the selected body to another body.";
CATPrtModelHeader.BoolAdd.ShortHelp="Add";
CATPrtModelHeader.BoolAdd.LongHelp="Add/Adds the body to another body";


CATPrtModelHeader.BoolIntersect.Title="Intersect...";
CATPrtModelHeader.BoolIntersect.Help="Intersects the selected body with another body";
CATPrtModelHeader.BoolIntersect.ShortHelp="Intersect";
CATPrtModelHeader.BoolIntersect.LongHelp="Intersect/Intersects the body with another body";


CATPrtModelHeader.BoolTrim.Title="Union Trim...";
CATPrtModelHeader.BoolTrim.Help="Trims the selected body with another body";
CATPrtModelHeader.BoolTrim.ShortHelp="Union Trim";
CATPrtModelHeader.BoolTrim.LongHelp="Union Trim/Trims the body with another body";


CATPrtModelHeader.BoolRemoveLump.Title="Remove Lump...";
CATPrtModelHeader.BoolRemoveLump.Help="Removes material";
CATPrtModelHeader.BoolRemoveLump.ShortHelp="Remove Lump";
CATPrtModelHeader.BoolRemoveLump.LongHelp="Remove Lump/Removes material";


CATPrtModelHeader.BoolRemove.Title="Remove...";
CATPrtModelHeader.BoolRemove.Help="Removes the selected body from another body.";
CATPrtModelHeader.BoolRemove.ShortHelp="Remove";
CATPrtModelHeader.BoolRemove.LongHelp="Remove/Removes the body from another body";


// == PositiveLoft == 

CATPrtModelHeader.PositiveLoftHeader.Title="Multi-sections Solid...";
CATPrtModelHeader.PositiveLoftHeader.Help="Creates a Multi-sections Solid.";
CATPrtModelHeader.PositiveLoftHeader.LongHelp="Multi-sections Solid\nCreates a Multi-sections Solid.";
CATPrtModelHeader.PositiveLoftHeader.ShortHelp="Multi-sections Solid";


// == NegativeLoft == 

CATPrtModelHeader.NegativeLoftHeader.Title="Removed Multi-sections Solid...";
CATPrtModelHeader.NegativeLoftHeader.Help="Creates a Removed Multi-sections Solid.";
CATPrtModelHeader.NegativeLoftHeader.LongHelp="Removed Multi-sections Solid\nCreates a Removed Multi-sections Solid.";
CATPrtModelHeader.NegativeLoftHeader.ShortHelp="Removed Multi-sections Solid";


// == PositiveBlend == 

CATPrtModelHeader.PositiveBlendHeader.Title="Blend...";
CATPrtModelHeader.PositiveBlendHeader.Help="Creates a positive Blend.";
CATPrtModelHeader.PositiveBlendHeader.LongHelp="Blend\nCreates a positive Blend.";
CATPrtModelHeader.PositiveBlendHeader.ShortHelp="Blend";


// == NegativeBlend == 

CATPrtModelHeader.NegativeBlendHeader.Title="Removed Blend...";
CATPrtModelHeader.NegativeBlendHeader.Help="Creates a negative Blend.";
CATPrtModelHeader.NegativeBlendHeader.LongHelp="Removed Blend\nCreates a negative Blend.";
CATPrtModelHeader.NegativeBlendHeader.ShortHelp="Removed Blend";


// == PadDF == 

CATPrtModelHeader.PadDFHeader.Title="Drafted Filleted Pad...";
CATPrtModelHeader.PadDFHeader.Help="Creates a pad with draft and fillets.";
CATPrtModelHeader.PadDFHeader.LongHelp="Pad\nCreates a pad with draft and fillets.";
CATPrtModelHeader.PadDFHeader.ShortHelp="Drafted Filleted Pad";


// == PocketDF == 

CATPrtModelHeader.PocketDFHeader.Title="Drafted Filleted Pocket...";
CATPrtModelHeader.PocketDFHeader.Help="Creates a pocket with draft and fillets.";
CATPrtModelHeader.PocketDFHeader.LongHelp="Pocket\nCreates a pocket with draft and fillets.";
CATPrtModelHeader.PocketDFHeader.ShortHelp="Drafted Filleted Pocket";


// == MultiPad == 

CATPrtModelHeader.MultiPadHeader.Title="Multi-Pad...";
CATPrtModelHeader.MultiPadHeader.Help="Creates a multi-pad by extruding a multi-domain profile.";
CATPrtModelHeader.MultiPadHeader.LongHelp="Multi-Pad\nCreates a multi-pad from a multi-domain profile.";
CATPrtModelHeader.MultiPadHeader.ShortHelp="Multi-Pad";


// == MultiPocket == 

CATPrtModelHeader.MultiPocketHeader.Title="Multi-Pocket...";
CATPrtModelHeader.MultiPocketHeader.Help="Creates a multi-pocket by removing material.";
CATPrtModelHeader.MultiPocketHeader.LongHelp="Multi-Pocket\nCreates a multi-pocket from a multi-domain profile.";
CATPrtModelHeader.MultiPocketHeader.ShortHelp="Multi-Pocket";


// == PowerCopy and catalog ==

// == Templates Creation ==
//CATPrtModelHeader.PrtCreatePowerCopy.Title            = "PowerCopy Creation...";
//CATPrtModelHeader.PrtCreatePowerCopy.Help             = "Creates a PowerCopy";
//CATPrtModelHeader.PrtCreatePowerCopy.ShortHelp        = "PowerCopy Creation";
//CATPrtModelHeader.PrtCreatePowerCopy.LongHelp         = "Creates a PowerCopy";
// == Templates Insantiation ==
//CATPrtModelHeader.PrtInstanciatePowerCopy.Title            = "PowerCopy Instantiation...";
//CATPrtModelHeader.PrtInstanciatePowerCopy.Help             = "Instantiate a defined PowerCopy stored in a part";
//CATPrtModelHeader.PrtInstanciatePowerCopy.ShortHelp        = "PowerCopy Instantiation";
//CATPrtModelHeader.PrtInstanciatePowerCopy.LongHelp         = "Instantiate a defined PowerCopy stored in a part";
// == Udf Feature Save ==
//CATPrtModelHeader.PrtSaveInCatalog.Title                 = "PowerCopy Save in Catalog...";
//CATPrtModelHeader.PrtSaveInCatalog.Help                  = "Save PowerCopy in a catalog";
//CATPrtModelHeader.PrtSaveInCatalog.ShortHelp             = "PowerCopy Save in Catalog";
//CATPrtModelHeader.PrtSaveInCatalog.LongHelp              = "Save PowerCopy in a catalog";
// == Udf Feature Save ==


// ==== Point =====

CATPrtModelHeader.PrtPointHeader.Title                 = "Point...";
CATPrtModelHeader.PrtPointHeader.Help                  = "Creates one or more points";
CATPrtModelHeader.PrtPointHeader.ShortHelp             = "Point";
CATPrtModelHeader.PrtPointHeader.LongHelp              = 
"Point
Creates one or more points.";


// ===== Line ======

CATPrtModelHeader.PrtLineHeader.Title                  = "Line...";
CATPrtModelHeader.PrtLineHeader.Help                   = "Creates a line";
CATPrtModelHeader.PrtLineHeader.ShortHelp              = "Line";
CATPrtModelHeader.PrtLineHeader.LongHelp               = 
"Line
Creates a line.";


// == Plane == 

CATPrtModelHeader.PrtPlaneHeader.Title                 = "Plane...";
CATPrtModelHeader.PrtPlaneHeader.Help                  = "Creates a plane";
CATPrtModelHeader.PrtPlaneHeader.ShortHelp             = "Plane";
CATPrtModelHeader.PrtPlaneHeader.LongHelp              = 
"Plane
Creates a plane.";

// == InsertInNewBody == 
CATPrtModelHeader.SelFeatNewBody.Title="Insert in new body";
CATPrtModelHeader.SelFeatNewBody.Help="Insert the selected features in new body";
CATPrtModelHeader.SelFeatNewBody.ShortHelp="Insert in new body";
CATPrtModelHeader.SelFeatNewBody.LongHelp="Insert the selected features in new body";

// == SolidCombine == 

CATPrtModelHeader.SolidCombineHeader.Title="Solid Combine...";
CATPrtModelHeader.SolidCombineHeader.Help="Creates an intersection solid by extruding two open or closed profiles.";
CATPrtModelHeader.SolidCombineHeader.LongHelp="Solid Combine\nCreates an intersection solid by extruding two open or closed profiles.";
CATPrtModelHeader.SolidCombineHeader.ShortHelp="Solid Combine";

// == AddPosition == 
CATPrtModelHeader.PrtPositionImportCom.Title="Add Position...";
CATPrtModelHeader.PrtPositionImportCom.Help="Add an axis and reorder the transformations which are following the import";
CATPrtModelHeader.PrtPositionImportCom.ShortHelp="Add Position";
CATPrtModelHeader.PrtPositionImportCom.LongHelp="Add an axis and reorder the transformations which are following the import";

// == Auto Fillet == 

CATPrtModelHeader.AutoFilletHeader.Title="Auto Fillet...";
CATPrtModelHeader.AutoFilletHeader.Help="Creates an automatic filleting.";
CATPrtModelHeader.AutoFilletHeader.LongHelp="Auto Fillet\nCreates an automatic filleting.";
CATPrtModelHeader.AutoFilletHeader.ShortHelp="Automatic filleting";

// == Technological Results ==
CATPrtModelHeader.CreateTROutputHdr.Title="Create Technological Results";
CATPrtModelHeader.CreateTROutputHdr.Help="Creates the Technological Results feature";
CATPrtModelHeader.CreateTROutputHdr.LongHelp="Creates the Technological Results feature";
CATPrtModelHeader.CreateTROutputHdr.ShortHelp="Technological Results";

CATPrtModelHeader.ResetDeletedTRHdr.Title="Reset deleted Technological Results";
CATPrtModelHeader.ResetDeletedTRHdr.Help="Reset the deleted Technological Results";
CATPrtModelHeader.ResetDeletedTRHdr.LongHelp="Enable the deleted technological results to be re-created";
CATPrtModelHeader.ResetDeletedTRHdr.ShortHelp="Reset deleted Technological Results";

// == Mean Dimensions == 
CATPrtModelHeader.MeanDimensions.Title     = "Mean Dimensions";
CATPrtModelHeader.MeanDimensions.ShortHelp = "Mean Dimensions";
CATPrtModelHeader.MeanDimensions.Help      = "Computes the mean dimensions";
CATPrtModelHeader.MeanDimensions.LongHelp  = "Computes mean dimensions on toleranced parameters.";

// == Wall Thickness Analysis  == 
CATPrtModelHeader.WallThicknessAnalysisHeader.Title     = "Wall Thickness Analysis";
CATPrtModelHeader.WallThicknessAnalysisHeader.Help      = "Analysis of the current part thicknesses";
CATPrtModelHeader.WallThicknessAnalysisHeader.LongHelp  = "Analysis of the current part thicknesses. \nProvides capability to display symbolic geometry \nand numerical characteristics.";
CATPrtModelHeader.WallThicknessAnalysisHeader.ShortHelp = "Wall Thickness Analysis";

// == Auto Fillet == 

CATPrtModelHeader.AutoDraftHeader.Title="Auto Draft...";
CATPrtModelHeader.AutoDraftHeader.Help="Creates an automatic draft.";
CATPrtModelHeader.AutoDraftHeader.LongHelp="Auto Draft\nCreates an automatic draft.";
CATPrtModelHeader.AutoDraftHeader.ShortHelp="Automatic draft";

// == LMG Sketch == 

CATPrtModelHeader.LMGSketchHeader.Title="LMG Sketch ...";
CATPrtModelHeader.LMGSketchHeader.Help="Creates an dedicated sketch for LMG.";
CATPrtModelHeader.LMGSketchHeader.LongHelp="LMG Sketch\nCreates a dedicated sketch for LMG.";
CATPrtModelHeader.LMGSketchHeader.ShortHelp="LMG Sketch";

